-- ----------------------------------------
-- PoiXson - Common Lua Tools
-- license GPL-3
-- author lorenzo at poixson.com
-- link http://ftb.poixson.com/lua/
-- ----------------------------------------



startupDelay  = 5



-- ----------------------------------------
-- do not change below line



os.loadAPI("/lib/pxnStrings")
os.loadAPI("/lib/pxnMonitors")



stopping = false
monitors = {}



-- ----------------------------------------
-- global functions



clear   = function()         pxnMonitors.clear()           end
pos     = function(x, y)     pxnMonitors.pos(x, y)         end
center  = function(msg)      pxnMonitors.center(msg)       end
print   = function(msg, mon) pxnMonitors.print(msg, mon)   end
println = function(msg, mon) pxnMonitors.println(msg, mon) end
sleepdot = function(time, dots) pxnMonitors.sleepdot(time, dots) end



-- ----------------------------------------
-- startup / shutdown



clear()



function InstallStartup(scriptFile, ...)
  local filename = "/startup"
  if not isFile(filename) then
    println("Creating startup file..")
    local h = fs.open(filename, "w")
    if h == nil then
      pos(1, 1) error("Failed to create file: " .. filename) sleepdot(1) return
    end
    dl = function(filename)
      println("  " .. filename)
      h.write( "shell.run( \"dl " .. filename .. "\" )\n" )
    end
    dl(scriptFile)
    dl("lib/pxnCommon")
    dl("lib/pxnStrings")
    dl("lib/pxnMonitors")
    for _, v in ipairs(arg) do
      dl(v)
    end
    h.write( "term.clear() term.setCursorPos(1, 1)\n" )
    h.write( "shell.run( \"" .. scriptFile .. "\")\n" )
    h.close()
    sleepdot(1)
  end
end



function shutdown()
  stopping = true
  for i=0,3 do
    pos(1, 1) center("+------------------+")
    pos(1, 2) center("|                  |")
    pos(1, 3) center(
      "|    Stopping"
      .. pxnStrings.strRepeat(i,   ".")
      .. pxnStrings.strRepeat(3-i, " ")
      .. "   |"
    )
    pos(1, 4) center("|                  |")
    pos(1, 5) center("+------------------+")
    pos(1, 1)
    os.sleep(0.25)
  end
  clear()
end



-- ----------------------------------------
-- is/not empty



function isEmpty(str)
  return str == nil or str == ""
end
function notEmpty(str)
  return str ~= nil and str ~= ""
end



function isFile(filename)
  local h = fs.open(filename, "r")
  if h == nil then
    return false
  end
  h.close()
  return true
end
function notFile(filename)
  local h = fs.open(filename, "r")
  if h == nil then
    return true
  end
  h.close()
  return false
end



function readLineFromFile(filename)
  if isEmpty(filename) then
    pos(1, 1) error("filename argument is required!") sleepdot(1) return nil
  end
  if notFile(filename) then
    return nil
  end
  local h = fs.open(filename, "r")
  if h == nil then
    pos(1, 1) error("Failed to read file: " .. filename) sleepdot(1) return nil
  end
  local line = h.readLine()
  h.close()
  return line
end
function readLinesFromFile(filename)
  if isEmpty(filename) then
    pos(1, 1) error("filename argument is required!") sleepdot(1) return nil
  end
  if notFile(filename) then
    return nil
  end
  local h = fs.open(filename, "r")
  if h == nil then
    pos(1, 1) error("Failed to read file: " .. filename) sleepdot(1) return nil
  end
  local lines = {}
  local index = 0
  while true do
    index = index + 1
    local line = h.readLine()
    if line == nil then
      break
    end
    lines[index] = line
  end
  h.close()
  return lines
end

-- ----------------------------------------
-- PoiXson - Common Lua Tools
-- license GPL-3
-- author lorenzo at poixson.com
-- link http://ftb.poixson.com/lua/
-- ----------------------------------------



-- ----------------------------------------
-- DO NOT CHANGE BELOW LINE
-- ----------------------------------------



os.loadAPI("/lib/pxnStrings")
os.loadAPI("/lib/pxnMonitors")
os.loadAPI("/lib/pxnKeyPressListener")

stopping = false



-- ----------------------------------------
-- global functions



clear    = function()           pxnMonitors.clear()              end
pos      = function(x, y)       pxnMonitors.pos(x, y)            end
print    = function(msg, mon)   pxnMonitors.print(msg, mon)      end
println  = function(msg, mon)   pxnMonitors.println(msg, mon)    end
center   = function(msg, y)     pxnMonitors.center(msg, y)       end
sleepdot = function(time, dots) pxnMonitors.sleepdot(time, dots) end



-- ----------------------------------------
-- startup / shutdown



clear()



function InstallStartup(scriptFile)
  local filename = "/startup"
  if notFile(filename) then
    clear()
    println()
    println("Creating startup file..")
    local h = fs.open(filename, "w")
    if h == nil then
      pos(1, 1) error("Failed to create file: " .. filename) sleepdot(1) return
    end
    h.write( "term.clear() term.setCursorPos(1, 1)\n" )
    h.write( "shell.run( \"" .. scriptFile .. "\")\n" )
    h.close()
    sleepdot(1)
  end
end



function isStopping()
  return stopping
end
function shutdown()
  if stopping then
    return
  end
  stopping = true
  center("+------------------+", 1)
  center("|                  |", 2)
  center("|                  |", 3)
  center("|                  |", 4)
  center("+------------------+", 5)
  center("Stopping ", 3)
  sleepdot(1.5, 3)
  clear()
end



-- ----------------------------------------
-- is/not empty



function isEmpty(str)
  return str == nil or str == ""
end
function notEmpty(str)
  return str ~= nil and str ~= ""
end

function isTableEmpty(table)
  if table == nil then
    return true
  end
  for _, _ in ipairs do
    return false
  end
  return true
end
function notTableEmpty(table)
  if table == nil then
    return false
  end
  for _, _ in ipairs do
    return true
  end
  return false
end



-- ----------------------------------------
-- time



function getTicks()
  return ( ((os.time() * 1000.0) + 18000) % 24000 ) + (os.day() * 24000)
end



-- example:
--   last = 0
--   local since, last = getTicksSince(last)
function getTicksSince(last)
  local current = getTicks()
  -- first call
  if last == nil or last <= 0 then
    return nil, current
  end
  local since = current - last
  return since, current
end



-- ----------------------------------------
-- peripherals



function DetectPeripherals(title, type)
  local periphs = {}
  peripheral.find(
    type,
    function(name)
      local p = peripheral.wrap(name)
      table.insert(periphs, p)
      return true
    end
  )
  local s = "s"
  if #periphs ~= 1 then
    s = ""
  end
  print("Found " .. #periphs .. " " .. title .. s)
  sleepdot(1, 3) println()
  return periphs
end
function DetectPeripheralsRequired(title, type)
  local periphs =
    DetectPeripherals(title, type)
  if isEmpty(periphs) then
    pos(1, 1) error("No " .. title .. "s detected!") sleepdot(1) return
  end
  return periphs
end



-- ----------------------------------------
-- files



function isFile(filename)
  local h = fs.open(filename, "r")
  if h == nil then
    return false
  end
  h.close()
  return true
end
function notFile(filename)
  local h = fs.open(filename, "r")
  if h == nil then
    return true
  end
  h.close()
  return false
end



function readLineFromFile(filename)
  if isEmpty(filename) then
    pos(1, 1) error("filename argument is required!") sleepdot(1) return nil
  end
  if notFile(filename) then
    return nil
  end
  local h = fs.open(filename, "r")
  if h == nil then
    pos(1, 1) error("Failed to read file: " .. filename) sleepdot(1) return nil
  end
  local line = h.readLine()
  h.close()
  return line
end
function readLinesFromFile(filename)
  if isEmpty(filename) then
    pos(1, 1) error("filename argument is required!") sleepdot(1) return nil
  end
  if notFile(filename) then
    return nil
  end
  local h = fs.open(filename, "r")
  if h == nil then
    pos(1, 1) error("Failed to read file: " .. filename) sleepdot(1) return nil
  end
  local lines = {}
  local index = 0
  while true do
    index = index + 1
    local line = h.readLine()
    if line == nil then
      break
    end
    lines[index] = line
  end
  h.close()
  return lines
end

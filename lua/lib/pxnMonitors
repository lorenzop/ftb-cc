-- ----------------------------------------
-- PoiXson - Monitor Tools
-- license GPL-3
-- author lorenzo at poixson.com
-- link http://ftb.poixson.com/lua/
-- ----------------------------------------



monitorsFilename = "/configs/monitor_names"



-- ----------------------------------------
-- do not change below line



posX = 1
posY = 1
bgColor = colors.black

monitors = {}



-- ----------------------------------------
-- global functions



isEmpty  = function(str) return pxnCommon.isEmpty(str)  end
notEmpty = function(str) return pxnCommon.notEmpty(str) end



-- ----------------------------------------
-- monitor functions



function DetectMonitors()
  local filename = monitorsFilename
  -- create monitors file
  if pxnCommon.notFile(filename) then
    clear()
    println()
    print("What side or name is the monitor? ")
    local answer = io.read()
    println()
    local h = fs.open(filename, "w")
    if h == nil then
      pos(1, 1) error("Failed to create file: " .. filename) sleepdot(1) return
    end
    if notEmpty(answer) then
      h.write(answer .. "\n")
    end
    h.close()
    println()
    print("Created file: " .. filename)
    sleepdot(1)
  end
  -- read monitors file
  local lines = pxnCommon.readLinesFromFile(filename)
  if lines ~= nil and #lines > 0 then
    local index = 0
    local found = {}
    for _, name in ipairs(lines) do
      if notEmpty(name) then
        if index == 0 then
          println()
          println("Found Monitors:")
        end
        index = index + 1
        if peripheral.isPresent(name) then
          println("  " .. name)
          local mon = peripheral.wrap(name)
          if mon == nil then
            pos(1, 1) error("Failed to load monitor: " .. name) sleepdot(1) return
          end
          found[index] = mon
          mon.clear()
          mon.setCursorPos(1, 1)
          mon.write("Detected: " .. name .. "\n")
        else
          pos(1, 1) error("Monitor not found: " .. name) sleepdot(1) return
        end
      end
    end -- end for
    monitors = found
  end
end



function clear(mon)
  if mon == nil then
    term.clear()
    term.setBackgroundColor(bgColor)
    term.clear()
    term.setCursorPos(1, 1)
    for _, mon in ipairs(monitors) do
      mon.clear()
      mon.setBackgroundColor(bgColor)
      mon.clear()
      mon.setCursorPos(1, 1)
    end
  else
    mon.clear()
    mon.setBackgroundColor(bgColor)
    mon.clear()
    mon.setCursorPos(1, 1)
  end
  posX = 1
  posY = 1
end



function pos(x, y, mon)
  if x ~= nil then
    posX = x
  end
  if y ~= nil then
    posY = y
  end
  if mon == nil then
    term.setCursorPos(posX, posY)
    for _, mon in ipairs(monitors) do
      mon.setCursorPos(posX, posY)
    end
  else
    mon.setCursorPos(posX, posY)
  end
end




function setColor(color, mon)
  foreColor = color
  if mon == nil then
    term.setTextColor(color)
    for _, mon in monitors do
      mon.setTextColor(color)
    end
  else
    mon.setTextColor(color)
  end
end
function setBgColor(color, mon)
  bgColor = color
  if mon == nil then
    term.setBackgroundColor(color)
    for _, mon in monitors do
      mon.setBackgroundColor(color)
    end
  else
    mon.setBackgroundColor(color)
  end
end



-- ----------------------------------------
-- print



function print(msg, mon)
  if isEmpty(msg) then
    return
  end
  if mon == nil then
    print(msg, term)
    for _, mon in ipairs(monitors) do
      if mon ~= nil then
        print(msg, mon)
      end
    end
  else
    mon.write(msg)
  end
end
function println(msg, mon)
  if msg == nil then
    pos(1, posY + 1, mon)
  else
    print(msg, mon)
    pos(1, posY + 1, mon)
  end
end



function center(msg, y, mon)
  if y == nil then
    y = posY
  end
  if mon == nil then
    center(msg, y, term)
    for _, mon in ipairs(monitors) do
      center(msg, y, mon)
    end
    return
  end
  local sizeX, sizeY = mon.getSize()
  local len = string.len(msg)
  mon.setCursorPos(
    math.floor( ((sizeX - len) / 2.0) + 1.0 ),
    y
  )
  mon.write(msg)
  posX = 1
  posY = y + 1
end
function right(msg, y, mon)
  if y == nil then
    y = posY
  end
  if mon == nil then
    right(msg, y, term)
    for _, mon in ipairs(monitors) do
      right(msg, y, mon)
    end
    return
  end
  local sizeX, sizeY = mon.getSize()
  local len = string.len(msg)
  mon.setCursorPos(
    (sizeX - len) + 1,
    y
  )
  mon.write(msg)
  posX = 1
  posY = y + 1
end



function sleepdot(time, dots)
  if dots == nil then
    dots = 3
  end
  interval = (time / (dots + 1.0))
  for i = 0,dots,1 do
    if i > 0 then
      print(".")
    end
    os.sleep(interval)
  end
end

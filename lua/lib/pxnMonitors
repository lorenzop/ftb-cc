-- ----------------------------------------
-- PoiXson - Monitor Tools
-- license GPL-3
-- author lorenzo at poixson.com
-- link http://ftb.poixson.com/lua/
-- ----------------------------------------



-- ----------------------------------------
-- DO NOT CHANGE BELOW LINE
-- ----------------------------------------



posX = 1
posY = 1
bgColor = colors.black

monitors = {}



-- ----------------------------------------
-- global functions



isEmpty  = function(str) return pxnCommon.isEmpty(str)  end
notEmpty = function(str) return pxnCommon.notEmpty(str) end



-- ----------------------------------------
-- monitor functions



function Detect()
  monitors =
    pxnCommon.DetectPeripherals(
      "monitor",
      "monitor"
    )
end



-- ----------------------------------------
-- print



function print(msg, mon)
  if isEmpty(msg) then
    return
  end
  if mon == nil then
    print(msg, term)
    for _,m in ipairs(monitors) do
      if m ~= nil then
        print(msg, m)
      end
    end
  else
    mon.write(msg)
  end
end
function println(msg, mon)
  posY = posY + 1
  if msg == nil then
    pos(1, nil, mon)
  else
    print(msg, mon)
    pos(1, nil, mon)
  end
end



function center(msg, y, mon)
  local nextLine = false
  if y == nil then
    y = posY
    nextLine = true
  end
  if mon == nil then
    center(msg, y, term)
    for _,m in ipairs(monitors) do
      center(msg, y, m)
    end
    if nextLine then
      pos(1, y + 1)
    end
    return
  end
  local sizeX, sizeY = mon.getSize()
  local len = string.len(msg)
  mon.setCursorPos(
    math.floor( ((sizeX - len) / 2.0) + 1.0 ),
    y
  )
  mon.write(msg)
  if nextLine then
    pos(1, y + 1)
  end
end
function right(msg, y, mon)
  local nextLine = false
  if y == nil then
    y = posY
    nextLine = true
  end
  if mon == nil then
    right(msg, y, term)
    for _,m in ipairs(monitors) do
      right(msg, y, m)
    end
    if nextLine then
      pos(1, y + 1)
    end
    return
  end
  local sizeX, sizeY = mon.getSize()
  local len = string.len(msg)
  mon.setCursorPos(
    (sizeX - len) + 1,
    y
  )
  mon.write(msg)
  if nextLine then
    pos(1, y + 1)
  end
end



-- ----------------------------------------
-- screen



function setScale(scale, mon)
  if mon == nil then
    for _,m in ipairs(monitors) do
      m.setTextScale(scale)
    end
    return
  end
  mon.setTextScale(scale)
  mon.clear()
end



function pos(x, y, mon)
  if x ~= nil then
    posX = x
  end
  if y ~= nil then
    posY = y
  end
  if mon == nil then
    term.setCursorPos(posX, posY)
    for _,m in ipairs(monitors) do
      m.setCursorPos(posX, posY)
    end
  else
    mon.setCursorPos(posX, posY)
  end
end
function posRelative(x, y, mon)
  if x ~= nil then
    posX = posX + x
  end
  if y ~= nil then
    posY = posY + y
  end
  pos(nil, nil, mon)
end

function getPos()
  return posX, posY
end
function getPosX()
  return posX
end
function getPosY()
  return posY
end



function setColor(color, mon)
  foreColor = color
  if mon == nil then
    term.setTextColor(color)
    for _,m in ipairs(monitors) do
      m.setTextColor(color)
    end
  else
    mon.setTextColor(color)
  end
end
function setBgColor(color, mon)
  bgColor = color
  if mon == nil then
    term.setBackgroundColor(color)
    for _,m in ipairs(monitors) do
      m.setBackgroundColor(color)
    end
  else
    mon.setBackgroundColor(color)
  end
end



function clear(mon)
  -- clear all monitors
  if mon == nil then
    term.clear()
    term.setBackgroundColor(bgColor)
    term.clear()
    term.setCursorPos(1, 1)
    for _,m in ipairs(monitors) do
      m.clear()
      m.setBackgroundColor(bgColor)
      m.clear()
      m.setCursorPos(1, 1)
    end
  -- clear specific monitor
  else
    mon.clear()
    mon.setBackgroundColor(bgColor)
    mon.clear()
    mon.setCursorPos(1, 1)
  end
  pos(1, 1)
end



function sleepdot(time, dots)
  if dots == nil then
    dots = 3
  end
  interval = (time / (dots + 1.0))
  for i = 0,dots,1 do
    if i > 0 then
      print(".")
    end
    os.sleep(interval)
  end
end
